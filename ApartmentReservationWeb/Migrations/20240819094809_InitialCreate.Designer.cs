// <auto-generated />
using System;
using ApartmentReservationWeb.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApartmentReservationWeb.Migrations
{
    [DbContext(typeof(OccupancyContext))]
    [Migration("20240819094809_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.ApartFacilities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("ApartFacilities");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.ApartFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApartFacilitiesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApartFacilitiesId");

                    b.ToTable("ApartFacility");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.ApartmentInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BedsCount")
                        .HasColumnType("int");

                    b.Property<double>("CapacitySquare")
                        .HasColumnType("float");

                    b.Property<double>("Cost")
                        .HasColumnType("float(18, 2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ExtraCost")
                        .IsRequired()
                        .HasColumnType("float(18, 2)");

                    b.Property<int?>("FacilitiesInfoId")
                        .HasColumnType("int");

                    b.Property<int>("GuestsCount")
                        .HasColumnType("int");

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Photos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rate")
                        .HasColumnType("float");

                    b.Property<int>("RoomsCount")
                        .HasColumnType("int");

                    b.Property<int?>("RuleId")
                        .HasColumnType("int");

                    b.Property<int?>("RulesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacilitiesInfoId");

                    b.HasIndex("HotelId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("RuleId");

                    b.ToTable("ApartmentsInfo", (string)null);
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.ApartmentRules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CancelCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("FromTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TillTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("ApartmentRules");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.HotelInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BuildingDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoomsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HotelInfo");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.OccupancyModel.Occupancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EvictionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GuestesCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("OccupancyDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OccupancyStateId")
                        .HasColumnType("int");

                    b.Property<string>("ReservedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("OccupancyStateId");

                    b.HasIndex("ReservedById");

                    b.HasIndex("ReviewId")
                        .IsUnique()
                        .HasFilter("[ReviewId] IS NOT NULL");

                    b.ToTable("Occupancies", (string)null);
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.OccupancyModel.OccupancyState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OccupancyState");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.ReservationDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<double?>("Cost")
                        .HasColumnType("float(18, 2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("ExtraCharge")
                        .HasColumnType("float(18, 2)");

                    b.Property<int?>("OccupancyId")
                        .HasColumnType("int");

                    b.Property<Guid>("ReservedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReservedById1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("OccupancyId");

                    b.HasIndex("ReservedById1");

                    b.HasIndex("StateId");

                    b.ToTable("ReservationDates", (string)null);
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApartmentInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccupancyId")
                        .HasColumnType("int");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentInfoId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.Rules", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApartmentRulesId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentRulesId");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.UserModel.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.UserModel.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("ApartmentRulesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Languages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentRulesId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.ApartFacility", b =>
                {
                    b.HasOne("ApartmentReservationWeb.Models.ApartmentModel.ApartFacilities", null)
                        .WithMany("FacilitiesList")
                        .HasForeignKey("ApartFacilitiesId");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.ApartmentInfo", b =>
                {
                    b.HasOne("ApartmentReservationWeb.Models.ApartmentModel.ApartFacilities", "FacilitiesInfo")
                        .WithMany()
                        .HasForeignKey("FacilitiesInfoId");

                    b.HasOne("ApartmentReservationWeb.Models.ApartmentModel.HotelInfo", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId");

                    b.HasOne("ApartmentReservationWeb.Models.UserModel.User", "Owner")
                        .WithMany("Apartments")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApartmentReservationWeb.Models.ApartmentModel.ApartmentRules", "Rule")
                        .WithMany()
                        .HasForeignKey("RuleId");

                    b.Navigation("FacilitiesInfo");

                    b.Navigation("Hotel");

                    b.Navigation("Owner");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.OccupancyModel.Occupancy", b =>
                {
                    b.HasOne("ApartmentReservationWeb.Models.ApartmentModel.ApartmentInfo", "Apartment")
                        .WithMany("Occupancies")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApartmentReservationWeb.Models.ApartmentModel.OccupancyModel.OccupancyState", "State")
                        .WithMany("Occupancies")
                        .HasForeignKey("OccupancyStateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApartmentReservationWeb.Models.UserModel.User", "ReservedBy")
                        .WithMany("Occupancies")
                        .HasForeignKey("ReservedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApartmentReservationWeb.Models.ApartmentModel.Review", "Review")
                        .WithOne("Occupancy")
                        .HasForeignKey("ApartmentReservationWeb.Models.ApartmentModel.OccupancyModel.Occupancy", "ReviewId");

                    b.Navigation("Apartment");

                    b.Navigation("ReservedBy");

                    b.Navigation("Review");

                    b.Navigation("State");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.ReservationDate", b =>
                {
                    b.HasOne("ApartmentReservationWeb.Models.ApartmentModel.ApartmentInfo", "Apartment")
                        .WithMany("Dates")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ApartmentReservationWeb.Models.ApartmentModel.OccupancyModel.Occupancy", "Occupancy")
                        .WithMany("Dates")
                        .HasForeignKey("OccupancyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApartmentReservationWeb.Models.UserModel.User", "ReservedBy")
                        .WithMany()
                        .HasForeignKey("ReservedById1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApartmentReservationWeb.Models.ApartmentModel.OccupancyModel.OccupancyState", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Apartment");

                    b.Navigation("Occupancy");

                    b.Navigation("ReservedBy");

                    b.Navigation("State");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.Review", b =>
                {
                    b.HasOne("ApartmentReservationWeb.Models.ApartmentModel.ApartmentInfo", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ApartmentInfoId");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.Rules", b =>
                {
                    b.HasOne("ApartmentReservationWeb.Models.ApartmentModel.ApartmentRules", null)
                        .WithMany("RulesList")
                        .HasForeignKey("ApartmentRulesId");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.UserModel.User", b =>
                {
                    b.HasOne("ApartmentReservationWeb.Models.ApartmentModel.ApartmentRules", "Rules")
                        .WithMany()
                        .HasForeignKey("ApartmentRulesId");

                    b.HasOne("ApartmentReservationWeb.Models.UserModel.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApartmentReservationWeb.Models.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApartmentReservationWeb.Models.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApartmentReservationWeb.Models.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApartmentReservationWeb.Models.UserModel.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.ApartFacilities", b =>
                {
                    b.Navigation("FacilitiesList");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.ApartmentInfo", b =>
                {
                    b.Navigation("Dates");

                    b.Navigation("Occupancies");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.ApartmentRules", b =>
                {
                    b.Navigation("RulesList");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.OccupancyModel.Occupancy", b =>
                {
                    b.Navigation("Dates");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.OccupancyModel.OccupancyState", b =>
                {
                    b.Navigation("Occupancies");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.ApartmentModel.Review", b =>
                {
                    b.Navigation("Occupancy")
                        .IsRequired();
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.UserModel.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ApartmentReservationWeb.Models.UserModel.User", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("Occupancies");
                });
#pragma warning restore 612, 618
        }
    }
}
